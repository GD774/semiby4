<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.semiby4.mapper.BoardMapper">

  <resultMap type="BoardDto" id="BoardMap">
    <id     property="boardNo"    column="BOARD_NO" />    
    <result property="hit"       column="HIT"/>
    <result property="title"       column="TITLE"/>
    <result property="contents"    column="CONTENTS"/>
    <result property="createDt"    column="CREATE_DT"/>
    <result property="modifyDt"    column="MODIFY_DT"/>
    <result property="attachCount" column="ATTACH_COUNT"/>
    <result property="cateNo" column="CATE_NO"/>
    <association property="user" javaType="UserDto">
      <id     property="userNo" column="USER_NO"/>
      <result property="userId"  column="USER_ID" />
      <result property="email"  column="EMAIL"/>
    </association>
  </resultMap>

  <resultMap type="CommentDto" id="CommentMap">
    <id     property="commentNo" column="COMMENT_NO" />
    <result property="state"     column="STATE" />
    <result property="depth"     column="DEPTH" />
    <result property="groupNo"   column="GROUP_NO" />
    <result property="boardNo"    column="BOARD_NO" />
    <result property="contents"  column="CONTENTS" />
    <result property="createDt"  column="CREATE_DT" />
    <association property="user" javaType="UserDto">
      <id     property="userNo" column="USER_NO" />
      <result property="userId"  column="USER_ID" />
      <result property="email"  column="EMAIL" />
    </association>

  </resultMap>

  <select id="getBoardCount"
          resultType="int">
    SELECT COUNT(*)
      FROM BOARD_T
  </select>
  
   <select id="getCountByCate"
            parameterType="Map">
   SELECT COUNT(*)
     FROM BOARD_T
   WHERE CATE_NO = #{cateNo}
 </select>

<select id="getBoardList"
        parameterType="Map"
        resultMap="BoardMap">
   SELECT 
       BOARD_NO, TITLE, CONTENTS, CREATE_DT, MODIFY_DT, HIT, CATE_NO,
       USER_NO, USER_ID, EMAIL
   FROM (
       SELECT 
           B.BOARD_NO, B.TITLE, B.CONTENTS, B.CREATE_DT, B.MODIFY_DT, B.HIT, B.CATE_NO,
           U.USER_NO, U.USER_ID, U.EMAIL,
           ROW_NUMBER() OVER (
               ORDER BY
                   CASE WHEN #{sort} = 'ASC' THEN B.BOARD_NO END ASC,
                   CASE WHEN #{sort} = 'DESC' THEN B.BOARD_NO END DESC,
                   CASE WHEN #{sort} = 'VIEW_COUNT_DESC' THEN B.HIT END DESC,
                   B.BOARD_NO DESC
           ) AS RN
       FROM BOARD_T B 
       INNER JOIN USER_T U ON B.USER_NO = U.USER_NO
   )
   WHERE RN BETWEEN #{begin} AND #{end}
</select>

  <update id="updateHit">
    UPDATE BOARD_T
       SET HIT = HIT + 1
     WHERE BOARD_NO = #{boardNo}
  </update>
  
  <select id="getBoardByNo"
          resultMap="BoardMap">
    SELECT B.BOARD_NO, B.TITLE, B.CONTENTS, B.CREATE_DT, B.MODIFY_DT
         , USR.USER_NO, USR.EMAIL
      FROM USER_T USR INNER JOIN BOARD_T B
        ON USR.USER_NO = B.USER_NO
     WHERE B.BOARD_NO = #{boardNo}
  </select>

  <insert id="insertBoard"
          parameterType="BoardDto">
    <selectKey order="BEFORE" keyProperty="boardNo" resultType="int">
      SELECT BOARD_SEQ.NEXTVAL
         FROM DUAL
    </selectKey>
     INSERT INTO BOARD_T (
          BOARD_NO
        , TITLE
        , CONTENTS
        , CATE_NO
        , CREATE_DT
        , MODIFY_DT
        , USER_NO  
      ) VALUES (
          #{boardNo}
        , #{title}
        , #{contents}
        , #{cateNo}
        , SYSTIMESTAMP
        , SYSTIMESTAMP 
        , #{user.userNo}
      )
  </insert>
  
  <insert id="insertAttach"
          parameterType="AttachDto">
  INSERT INTO ATTACH_T (
      ATTACH_NO
    , UPLOAD_PATH
    , FILESYSTEM_NAME
    , ORIGINAL_FILENAME
    , DOWNLOAD_COUNT
    , HAS_THUMBNAIL
    , BOARD_NO
  ) VALUES (
      ATTACH_SEQ.NEXTVAL
    , #{uploadPath}
    , #{filesystemName}
    , #{originalFilename}
    , 0    
    , #{hasThumbnail}
    , #{boardNo}
  )
  </insert>

  <insert id="insertComment"
          parameterType="CommentDto">
    INSERT INTO COMMENT_T (
        COMMENT_NO
      , CONTENTS
      , CREATE_DT
      , DEPTH
      , GROUP_NO
      , USER_NO
      , BOARD_NO
    ) VALUES (
        COMMENT_SEQ.NEXTVAL
      , #{contents}
      , CURRENT_TIMESTAMP
      , 0
      , COMMENT_SEQ.CURRVAL
      , #{user.userNo}
      , #{boardNo}
    )
  </insert>

  <select id="getCommentCount"
          resultType="int">
    SELECT COUNT(*)
      FROM COMMENT_T
     WHERE BOARD_NO = #{boardNo}
  </select>

  <select id="getCommentList"
          parameterType="Map"
          resultMap="CommentMap">
    SELECT COMMENT_NO, CONTENTS, CREATE_DT, STATE, DEPTH, GROUP_NO, BOARD_NO, USER_NO, EMAIL 
      FROM (SELECT ROW_NUMBER() OVER(ORDER BY C.GROUP_NO DESC, C.DEPTH ASC, C.COMMENT_NO DESC) AS RN
                 , C.COMMENT_NO, C.CONTENTS, C.STATE, C.CREATE_DT, C.DEPTH, C.GROUP_NO, C.BOARD_NO
                 , U.USER_NO, U.EMAIL
              FROM USER_T U INNER JOIN COMMENT_T C
                ON U.USER_NO = C.USER_NO
             WHERE BOARD_NO = #{boardNo})
     WHERE RN BETWEEN #{begin} AND #{end}
  </select>

  <update id="removeComment">
    UPDATE COMMENT_T
       SET STATE = 0
     WHERE BOARD_NO = #{boardNo}
  </update>

  <select id="getSearchCount"
          parameterType="Map"
          resultType="int">
      SELECT COUNT(*)    
        FROM USER_T U INNER JOIN BOARD_T B
          ON U.USER_NO = B.USER_NO 
        WHERE ${column} LIKE '%' || #{query} || '%'
  </select>
  
  <!-- 순지선이 추가 -->
  
  <select id="getAttachList"
          resultType="AttachDto">
   SELECT ATTACH_NO
    , UPLOAD_PATH
    , FILESYSTEM_NAME
    , ORIGINAL_FILENAME
    , DOWNLOAD_COUNT
    , HAS_THUMBNAIL
    , BOARD_NO
   FROM ATTACH_T
   WHERE BOARD_NO = #{boardNo}
  </select>
  
  <select id="getAttachByNo"
          resultType="AttachDto">
   SELECT  ATTACH_NO
    , UPLOAD_PATH
    , FILESYSTEM_NAME
    , ORIGINAL_FILENAME
    , DOWNLOAD_COUNT
    , HAS_THUMBNAIL
   FROM ATTACH_T
   WHERE ATTACH_NO = #{attachNo}
   </select>
   
   <update id="updateDownloadCount">
  UPDATE ATTACH_T
     SET DOWNLOAD_COUNT = DOWNLOAD_COUNT + 1
   WHERE ATTACH_NO = #{attachNo}
  </update>  
  
   <!-- 순지선이 멀티리스트를 위해 추가 -->
   <!-- HIT 값 추가 -->
    <select id="getBoardMultiList"
          parameterType="Map"
          resultMap="BoardMap">
    SELECT BOARD_NO, TITLE, CONTENTS, CREATE_DT, MODIFY_DT, HIT
         , USER_NO, USER_ID, EMAIL, CATE_NO, ATTACH_COUNT
    FROM (SELECT ROW_NUMBER() OVER (ORDER BY BOARD_NO DESC) AS RN
             , B.BOARD_NO, B.TITLE, B.CONTENTS, B.CREATE_DT, B.MODIFY_DT, B.HIT
             , USR.USER_NO, USR.USER_ID, USR.EMAIL, CATE_NO
             , (SELECT COUNT(*)
                  FROM ATTACH_T ATC
                 WHERE B.BOARD_NO = ATC.BOARD_NO) AS ATTACH_COUNT
          FROM USER_T USR INNER JOIN BOARD_T B
            ON USR.USER_NO = B.USER_NO
            WHERE CATE_NO = #{cateNo})
    WHERE RN BETWEEN 1 AND 5
    
  </select>
  
  <!-- 순지선이 멀티리스트를 위해 추가 -->
   <!-- HIT 값 추가 -->
   <select id="getBoardDetailList"
          parameterType="Map"
          resultMap="BoardMap">
      SELECT BOARD_NO, TITLE, CONTENTS, CREATE_DT, MODIFY_DT, HIT, CATE_NO, USER_NO, USER_ID, EMAIL
        FROM (SELECT B.BOARD_NO, B.TITLE, B.CONTENTS, B.CREATE_DT, B.MODIFY_DT, B.HIT, B.CATE_NO, U.USER_NO, U.USER_ID, U.EMAIL,
                 ROW_NUMBER() OVER (ORDER BY CASE WHEN #{sort} = 'ASC' THEN B.BOARD_NO END ASC,
                                 CASE WHEN #{sort} = 'DESC' THEN B.BOARD_NO END DESC,
                                 CASE WHEN #{sort} = 'VIEW_COUNT_DESC' THEN B.HIT END DESC, B.BOARD_NO DESC) AS RN
                FROM BOARD_T B INNER JOIN USER_T U ON B.USER_NO = U.USER_NO
                WHERE CATE_NO = #{cateNo})
       WHERE RN BETWEEN #{begin} AND #{end} AND CATE_NO = #{cateNo}
  </select>
  
  <!-- 삭제를 위해 추가 -->
  <delete id="deleteAttach">
    DELETE
      FROM ATTACH_T
     WHERE ATTACH_NO = #{attachNo}
  </delete>
  
  <delete id="deleteBoard">
    DELETE
      FROM BOARD_T
     WHERE BOARD_NO = #{boardNo}
  </delete>                   

<!-- 디테일리스트에서 검색기능 구현 (지희) -->
<select id="getSearchList" parameterType="Map" resultMap="BoardMap">
   SELECT BOARD_NO, USER_NO, TITLE, CONTENTS, HIT, CREATE_DT, MODIFY_DT, EMAIL, USER_ID, CATE_NO
    FROM (
        SELECT ROW_NUMBER() OVER(ORDER BY B.BOARD_NO DESC, U.USER_NO ASC) AS RN,
               B.BOARD_NO, B.TITLE, B.CONTENTS, B.CREATE_DT, B.MODIFY_DT, B.HIT, B.CATE_NO,
               U.USER_NO, U.EMAIL, U.USER_ID
        FROM USER_T U
        INNER JOIN BOARD_T B ON U.USER_NO = B.USER_NO
        WHERE 
            <choose>
                <when test="column == 'B.TITLE'">
                    B.TITLE LIKE '%' || #{query} || '%'
                </when>
                <when test="column == 'U.USER_ID'">
                    U.USER_ID LIKE '%' || #{query} || '%'
                </when>
                <when test="column == 'B.CONTENTS'">
                    B.CONTENTS LIKE '%' || #{query} || '%'
                </when>
                <otherwise>
                    1=1
                </otherwise>
            </choose>
    )
   WHERE RN BETWEEN #{begin} AND #{end}
</select>

<!-- detailList 검색 기능 -->
<select id="getSearchDetailList" parameterType="Map" resultMap="BoardMap">
    SELECT BOARD_NO, USER_NO, TITLE, CONTENTS, HIT, CREATE_DT, MODIFY_DT, EMAIL, USER_ID, CATE_NO
    FROM (
        SELECT ROW_NUMBER() OVER(ORDER BY B.BOARD_NO DESC, U.USER_NO ASC) AS RN,
               B.BOARD_NO, B.TITLE, B.CONTENTS, B.CREATE_DT, B.MODIFY_DT, B.HIT, B.CATE_NO,
               U.USER_NO, U.EMAIL, U.USER_ID
        FROM USER_T U
        INNER JOIN BOARD_T B ON U.USER_NO = B.USER_NO
        WHERE B.CATE_NO = #{cateNo} AND (
            <choose>
                <when test="column == 'B.TITLE'">
                    B.TITLE LIKE '%' || #{query} || '%'
                </when>
                <when test="column == 'U.USER_ID'">
                    U.USER_ID LIKE '%' || #{query} || '%'
                </when>
                <when test="column == 'B.CONTENTS'">
                    B.CONTENTS LIKE '%' || #{query} || '%'
                </when>
            </choose>
        )
    )
    WHERE RN BETWEEN #{begin} AND #{end}
</select>

<!-- 게시글 수정(지희) -->
<update id="updateBoard"
        parameterType="BoardDto">
  UPDATE BOARD_T
     SET TITLE = #{title}
       , CONTENTS = #{contents}
       , MODIFY_DT = SYSTIMESTAMP
   WHERE BOARD_NO = #{boardNo}
</update>

<!-- BEST HIT 게시판 (지희) -->
<select id="getBestHitList" 
      resultMap="BoardMap">
   SELECT B.BOARD_NO, B.TITLE, B.CONTENTS, B.CREATE_DT, B.MODIFY_DT, B.CATE_NO, B.HIT, U.USER_NO, U.USER_ID, U.EMAIL
     FROM BOARD_T B JOIN USER_T U ON B.USER_NO = U.USER_NO
     ORDER BY HIT DESC
     FETCH FIRST 5 ROWS ONLY
</select>

</mapper>
